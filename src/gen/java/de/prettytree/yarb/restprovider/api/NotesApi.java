/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.prettytree.yarb.restprovider.api;

import de.prettytree.yarb.restprovider.api.model.CreateBoardNote;
import de.prettytree.yarb.restprovider.api.model.CreatedResponse;
import de.prettytree.yarb.restprovider.api.model.InternalErrorMessage;
import de.prettytree.yarb.restprovider.api.model.UpdateBoardNote;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-12-22T15:48:57.260+01:00[Europe/Berlin]")

@Validated
@Api(value = "notes", description = "the notes API")
public interface NotesApi {

    @ApiOperation(value = "createNote", nickname = "createNote", notes = "Create a new note", response = CreatedResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = CreatedResponse.class),
        @ApiResponse(code = 404, message = "BoardColumn Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    @RequestMapping(value = "/notes",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreatedResponse> createNote(@ApiParam(value = ""  )  @Valid @RequestBody CreateBoardNote createBoardNote);


    @ApiOperation(value = "deleteNote", nickname = "deleteNote", notes = "Delete a note", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    @RequestMapping(value = "/notes/{noteId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteNote(@ApiParam(value = "",required=true) @PathVariable("noteId") Integer noteId);


    @ApiOperation(value = "deleteVote", nickname = "deleteVote", notes = "Delete one vote for the note", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 409, message = "Conflict: Note has no votes to delete") })
    @RequestMapping(value = "/notes/{noteId}/vote",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteVote(@ApiParam(value = "",required=true) @PathVariable("noteId") Integer noteId);


    @ApiOperation(value = "postVote", nickname = "postVote", notes = "Add one vote for the note", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK"),
        @ApiResponse(code = 404, message = "Not Found") })
    @RequestMapping(value = "/notes/{noteId}/vote",
        method = RequestMethod.POST)
    ResponseEntity<Void> postVote(@ApiParam(value = "",required=true) @PathVariable("noteId") Integer noteId);


    @ApiOperation(value = "updateNote", nickname = "updateNote", notes = "Update a note", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    @RequestMapping(value = "/notes/{noteId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateNote(@ApiParam(value = "",required=true) @PathVariable("noteId") Integer noteId,@ApiParam(value = ""  )  @Valid @RequestBody UpdateBoardNote updateBoardNote);

}
